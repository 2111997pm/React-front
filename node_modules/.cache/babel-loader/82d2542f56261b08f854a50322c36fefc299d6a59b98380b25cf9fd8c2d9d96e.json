{"ast":null,"code":"var _jsxFileName = \"/Users/prahalad/Desktop/zipfolder/fronted zip/src/pages/BookingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BookingPage() {\n  _s();\n  const {\n    linkId\n  } = useParams();\n  const [availability, setAvailability] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [bookedTimes, setBookedTimes] = useState([]);\n  const [availableTimes, setAvailableTimes] = useState([]);\n  useEffect(() => {\n    axios.get(`http://localhost:4000/api/availability/${linkId}`).then(res => setAvailability(res.data)).catch(() => alert(\"Invalid or expired booking link\"));\n  }, [linkId]);\n  const handleDateChange = async e => {\n    const date = e.target.value;\n    setSelectedDate(date);\n    const daySlots = availability.filter(slot => slot.date === date);\n    if (daySlots.length === 0) return setAvailableTimes([]);\n    const bookedRes = await axios.get(`http://localhost:4000/api/booked/${linkId}/${date}`);\n    setBookedTimes(bookedRes.data);\n    const times = [];\n    for (const slot of daySlots) {\n      const start = parseInt(slot.start_time.split(\":\"));\n      const end = parseInt(slot.end_time.split(\":\"));\n      for (let h = start; h < end; h++) {\n        const timeStr = `${String(h).padStart(2, '0')}:00`;\n        if (!bookedRes.data.includes(timeStr)) {\n          times.push(timeStr);\n        }\n      }\n    }\n    setAvailableTimes(times);\n  };\n  const bookSlot = async time => {\n    try {\n      await axios.post(\"http://localhost:4000/api/book\", {\n        linkId,\n        date: selectedDate,\n        time\n      });\n      alert(\"Booked successfully\");\n      setAvailableTimes(availableTimes.filter(t => t !== time));\n    } catch (error) {\n      alert(\"Failed to book\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Book a Time Slot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: [availableTimes.map((time, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => bookSlot(time),\n        style: {\n          margin: 5\n        },\n        children: time\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)), availableTimes.length === 0 && selectedDate && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No slots available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 61\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(BookingPage, \"LXxi/fKoRDTAIU3qMs1x/ZlF5Tg=\", false, function () {\n  return [useParams];\n});\n_c = BookingPage;\nvar _c;\n$RefreshReg$(_c, \"BookingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","BookingPage","_s","linkId","availability","setAvailability","selectedDate","setSelectedDate","bookedTimes","setBookedTimes","availableTimes","setAvailableTimes","get","then","res","data","catch","alert","handleDateChange","e","date","target","value","daySlots","filter","slot","length","bookedRes","times","start","parseInt","start_time","split","end","end_time","h","timeStr","String","padStart","includes","push","bookSlot","time","post","t","error","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","marginTop","map","i","onClick","margin","_c","$RefreshReg$"],"sources":["/Users/prahalad/Desktop/zipfolder/fronted zip/src/pages/BookingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nexport default function BookingPage() {\n    const { linkId } = useParams();\n    const [availability, setAvailability] = useState([]);\n    const [selectedDate, setSelectedDate] = useState(\"\");\n    const [bookedTimes, setBookedTimes] = useState([]);\n    const [availableTimes, setAvailableTimes] = useState([]);\n\n    useEffect(() => {\n        axios.get(`http://localhost:4000/api/availability/${linkId}`)\n            .then(res => setAvailability(res.data))\n            .catch(() => alert(\"Invalid or expired booking link\"));\n    }, [linkId]);\n\n    const handleDateChange = async (e) => {\n        const date = e.target.value;\n        setSelectedDate(date);\n\n        const daySlots = availability.filter(slot => slot.date === date);\n        if (daySlots.length === 0) return setAvailableTimes([]);\n\n        const bookedRes = await axios.get(`http://localhost:4000/api/booked/${linkId}/${date}`);\n        setBookedTimes(bookedRes.data);\n\n        const times = [];\n        for (const slot of daySlots) {\n            const start = parseInt(slot.start_time.split(\":\"));\n            const end = parseInt(slot.end_time.split(\":\"));\n            for (let h = start; h < end; h++) {\n                const timeStr = `${ String(h).padStart(2, '0')\n            }:00`;\n            if (!bookedRes.data.includes(timeStr)) {\n                times.push(timeStr);\n            }\n        }\n    }\n    setAvailableTimes(times);\n};\n\nconst bookSlot = async (time) => {\n    try {\n        await axios.post(\"http://localhost:4000/api/book\", {\n            linkId,\n            date: selectedDate,\n            time,\n        });\n        alert(\"Booked successfully\");\n        setAvailableTimes(availableTimes.filter(t => t !== time));\n    } catch (error) {\n        alert(\"Failed to book\");\n    }\n};\n\nreturn (\n    <div style={{ padding: 20 }}>\n        <h2>Book a Time Slot</h2>\n        <input type=\"date\" onChange={handleDateChange} value={selectedDate} />\n\n        <div style={{ marginTop: 20 }}>\n            {availableTimes.map((time, i) => (\n                <button key={i} onClick={() => bookSlot(time)} style={{ margin: 5 }}>\n                    {time}\n                </button>\n            ))}\n            {availableTimes.length === 0 && selectedDate && <p>No slots available.</p>}\n        </div>\n    </div>\n);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}